#!/bin/bash

#Colores
green="\e[0;32m\033[1m"
red="\e[0;31m\033[1m"
blue="\e[0;34m\033[1m"
yellow="\e[0;33m\033[1m"
purple="\e[1;35m\033[1m"
cyan="\e[0;36m\033[1m"
white="\e[0;37m\033[1m"
black="\e[0;30m\033[1m"
# Bold High Intensity
bblack='\033[1;90m'
bred='\033[1;91m'
bgreen='\033[1;92m'
byellow='\033[1;93m'
bblue='\033[1;94m'
bpurple='\033[1;95m'
bcyan='\033[1;96m'
bwhite='\033[1;97m'
#Especiales
end="\033[0m\e[0m"
warning="\e[5;31m\033[1m"

#Función para mostrar el banner inicial.
function mostrar_banner() {
	clear
	echo -e ${purple}
	echo -e "        ███████        █████                            █████ ██████   █████ ███████████    "
	echo -e "      ███░░░░░███     ░░███                            ░░███ ░░██████ ░░███ ░█░░░███░░░█    "
	echo -e "     ███     ░░███  ███████  █████ ████  █████   █████  ░███  ░███░███ ░███ ░   ░███  ░     "
	echo -e "    ░███      ░███ ███░░███ ░░███ ░███  ███░░   ███░░   ░███  ░███░░███░███     ░███        "
	echo -e "    ░███      ░███░███ ░███  ░███ ░███ ░░█████ ░░█████  ░███  ░███ ░░██████     ░███        "
	echo -e "    ░░███     ███ ░███ ░███  ░███ ░███  ░░░░███ ░░░░███ ░███  ░███  ░░█████     ░███        "
	echo -e "    ░░░███████░  ░░████████ ░░███████  ██████  ██████  █████ █████  ░░█████    █████        "
	echo -e "       ░░░░░░░     ░░░░░░░░   ░░░░░███ ░░░░░░  ░░░░░░  ░░░░░ ░░░░░    ░░░░░    ░░░░░        "
	echo -e "                              ███ ░███                                                      "
	echo -e "                             ░░██████                                                       "
	echo -e "                              ░░░░░░                                                        "
	echo -e 
	echo -e "  \t\t   Script de instalación y uso de herramientas OSINT${end}"
	echo -e "  \t"
	echo -e "  \t\t\t  ${bgreen}Master Ciberseguridad 12ª Edición ${end}"
	echo -e "  \t\t\t  Autor: ${bblue}Javier Aguilar${end}"
	echo -e "  \t\t\t  Tutor: ${cyan}Juanjo Salvador"${end}
	echo -e "  \t\t\t  Versión ${blue}1.0${end}"
	echo -e "  \t\t\t  Última modificación: ${blue}15-03-2024${end}"
	echo
	
       echo -e "Colores:     ${green}green,${red}red,${blue}blue,${yellow}yellow,${purple}purple,${cyan}cyan,${white}white,${black}black${end}"
       echo -e "Colores BHI: ${bgreen}green,${bred}red,${bblue}blue,${byellow}yellow,${bpurple}purple,${bcyan}cyan,${bwhite}white,${bblack}black${end}"
       echo -e "Especiales: ${warning}alerta${end}"
}

#Directorio de trabajo de OdyssINT
declare odyssinthome=$HOME/odyssint

#Requerimientos OdyssINT
declare requerimientos=("git" "python3" "python3-pip" "firefox" "openjdk-17-jdk")


# Función para mostrar el menú principal
function mostrar_menu_principal() {

    echo -e ${bpurple}"--------------------------------------------------------------------------------------------"${end}
    echo -e ${bpurple}"                                    Menú principal                                          "${end}
    echo -e ${bpurple}"--------------------------------------------------------------------------------------------"${end}
    echo -e "\n"
    echo -e "Seleccione una opción:"
    echo -e ${bblue}"1. Listar herramientas OSINT"${end}
    echo -e ${bgreen}"2. Configurar OdyssINT"${end}
    echo -e ${byellow}"0. Salir del script"${end}
    read -p "Opción: " menu_principal


    case $menu_principal in
        1)
            mostrar_banner
            listar_herramientas_osint;;
        2)
            mostrar_banner
            listar_configurar_odyssint;;
        0)
            salir_del_script;;            
        *)  
            mostrar_banner
	    echo -e "${red}Opción inválida.${end}"
	    mostrar_menu_principal;;
    esac

}

# Función para salir del script
function salir_del_script() {
    echo -e "${byellow}¿Estás seguro de que quieres salir del script? Presiona 'S/s' para confirmar.${end}"
    read -n1 -s tecla
    if [[ $tecla == "S" || $tecla == "s" ]]; then
        echo "¡Hasta pronto!"
        exit
    else
        mostrar_banner
	mostrar_menu_principal
    fi
}


#Función que permite pulsar ctrl+c en cualquier momento.
function ctrl_c() {
	echo 
	salir_del_script
	tput cnorm
	exit 0
}

# Función para mostrar el menú de herramientas OSINT
function listar_herramientas_osint()
{

        echo -e ${bblue}"--------------------------------------------------------------------------------------------"${end}
        echo -e ${bblue}"                                    Listado herramientas OSINT                              "${end}
        echo -e ${bblue}"--------------------------------------------------------------------------------------------"${end}
        echo -e "\n"
        echo "Seleccione una opción:"
	echo -e ${bblue}"1. The Harvester"
	echo -e ${blue}"   Extrae información de correos electrónicos, nombres de usuario y subdominios de diferentes"
	echo -e ${blue}"   fuentes online."${end}
	echo -e ${bblue}"2. Recon-ng"
	echo -e ${blue}"   Framework de automatización para tareas de OSINT. Permite ejecutar diferentes módulos"
	echo -e ${blue}"   para recopilar información de forma eficiente."${end}
        echo -e ${bblue}"3. Spiderfoot"
	echo -e ${blue}"   Herramienta de recopilación de información online. Escanea IPs, dominios "
	echo -e ${blue}"   y nombres de usuario para encontrar información relevante.."${end}
        echo -e ${bblue}"4. Maltego"
	echo -e ${blue}"   Herramienta que recopila y analiza datos de fuentes abiertas para la realización de investigaciones"${end}
	echo -e ${bblue}"9. Firefox - Extensiones"${end}
	echo -e ${byellow}"0. Volver a menú principal"${end}
	read -p "Opción: " herramientas_osint

	case "$herramientas_osint" in

		1) 
		# Verificar si theHarvester está instalado
		if ! command -v $odyssinthome/theHarvester/theHarvester.py &> /dev/null; then
	        echo -e "${byellow}theHarvester no está instalado. ¿Desea instalarlo ahora? (s/n)${end}"
	        read instalar
	        if [ "$instalar" = "s" ]; then
	            comprobar_requerimientos
	            instalar_theHarvester
	        else
	            return
	        fi
		fi
                gnome-terminal -- /bin/bash -c "$odyssinthome/theHarvester/theHarvester.py -h; exec /bin/bash"
                mostrar_banner
                listar_herramientas_osint
		;;
		2)
		# Verificar si Recong-ng está instalado
		if ! command -v $odyssinthome/recon-ng/recon-ng &> /dev/null; then
	        echo -e "${byellow}recon-ng no está instalado. ¿Desea instalarlo ahora? (s/n)${end}"
	        read instalar
	        if [ "$instalar" = "s" ]; then
	            comprobar_requerimientos
	            instalar_recon-ng
	        else
	            return
	        fi
		fi
                gnome-terminal -- /bin/bash -c "$odyssinthome/recon-ng/recon-ng; exec /bin/bash"
                mostrar_banner
                listar_herramientas_osint;;
		3)  
         	# Verificar si Spiderfoot está instalado
		if ! command -v $odyssinthome/spiderfoot/sfcli.py &> /dev/null; then
	        echo -e "${byellow}Spiderfoot no está instalado. ¿Desea instalarlo ahora? (s/n)${end}"
	        read instalar
	        if [ "$instalar" = "s" ]; then
	            comprobar_requerimientos
	            instalar_spiderfoot
	        else
	            return
	        fi
	        fi
                gnome-terminal -- /bin/bash -c "python3 $odyssinthome/spiderfoot/sf.py -l 127.0.0.1:5001; exec /bin/bash"
                mostrar_banner
                listar_herramientas_osint;;
                
                4)  
         	# Verificar si Maltego está instalado
		if ! command -v maltego &> /dev/null; then
	        echo -e "${byellow}Maltego no está instalado. ¿Desea instalarlo ahora? (s/n)${end}"
	        read instalar
	        if [ "$instalar" = "s" ]; then
	            comprobar_requerimientos
	            instalar_maltego
	        else
	            return
	        fi
		fi
                gnome-terminal -- /bin/bash -c "maltego; exec /bin/bash"
                mostrar_banner
                listar_herramientas_osint;;
		9)
		firefox -new-tab "about:addons"
                mostrar_banner
                listar_herramientas_osin ;;
		0) 
		mostrar_banner
		mostrar_menu_principal;;
		
		*)  mostrar_banner
	           echo -e "${red}Opción inválida.${end}"
	           listar_herramientas_osint;;
	esac

}

# Función para mostrar el menú de configuración de OdyssINT
function listar_configurar_odyssint()
{
        echo -e ${bgreen}"--------------------------------------------------------------------------------------------"${end}
        echo -e ${bgreen}"                                    Configurar OdyssINT                                     "${end}
        echo -e ${bgreen}"--------------------------------------------------------------------------------------------"${end}
	echo -e "\n"
        echo "Seleccione una opción:"
        echo -e ${bgreen} "1. Actualizar el sistema e instalar requerimientos de OdyssINT ${bred}(Requiere permiso root)"${end}
        echo -e ${bgreen} "2. Actualizar script desde GitHub y volver a ejecutar"${end}
        echo -e ${bgreen} "3. Instalar o actualizar herramientas OSINT"${end}
        echo -e ${bgreen} "4. Instalar o actualizar herramientas complementarias"${end}
        echo -e ${bgreen} "5. Instalar o actualizar extensiones firefox"${end}
        echo -e ${bgreen} "6. Instalar o actualizar marcadores en firefox" ${end}
        echo -e ${bred}   "7. Desinstalar todo y limpiar instalación de OdyssINT (Requiere permiso root)" ${end}
        echo -e ${byellow} "0. Volver a menú principal"${end}
	read -p "Opción: " configurar_odyssint

	case "$configurar_odyssint" in

		1) 
                   mostrar_banner 
		   actualizar_sistema_y_requerimientos;;
		2) 
                   mostrar_banner 
		   actualizar_y_ejecutar_script;;
		3) 
                   mostrar_banner 
		   instalar_herramientas_osint;;
		4) 
                   mostrar_banner 
		   instalar_herramientas_complementarias;;
		5) 
                   mostrar_banner 
		   instalar_extensiones_firefox;;
		6) 
                   mostrar_banner 
		   instalar_marcadores_firefox;;
   		7) 
                   mostrar_banner 
		   desinstalar_odyssint;;
		0) 
		   mostrar_banner
		   mostrar_menu_principal;;
		*) 
		   mostrar_banner
		   echo -e "${red}Opción inválida.${end}"
		   listar_configurar_odyssint;;       
	esac

}

# Función para actualizar el sistema e instalar requerimientos
function actualizar_sistema_y_requerimientos() {

        echo -e ${bblue}"--------------------------------------------------------------------------------------------"${end}
        echo -e ${bblue}"                         Configurar OdyssINT > Sistema y requerimientos                     "${end}
	echo -e ${bblue}"--------------------------------------------------------------------------------------------"${end}
	echo -e "\n"


    # Comprobar si la carpeta $odyssinthome existe
    if [ ! -d "$odyssinthome" ]; then
        echo "Creando directorio $odyssinthome..."
        mkdir -p $odyssinthome
    fi
	
    # Archivo de registro específico
    log_file="$odyssinthome/$(date +'%Y-%m-%d-%H-%M')-actualizacion.log"
    
    echo -e "Se va a actualizar el sistema e instalar las siguientes aplicaciones requeridas:"
    for app in "${requerimientos[@]}"; do
    echo -e "-${blue}$app${end}"
    done
    echo -e "${byellow}Presiona 'S/s' para confirmar y cualquier otra tecla para volver.${end}"
    read -n 1 -s tecla_confirmacion
    if [[ $tecla_confirmacion == "S" || $tecla_confirmacion == "s" ]]; then
    echo "Procediendo:"
    else
        mostrar_banner
        echo -e "${byellow}Volviendo al menú principal...${end}"
        mostrar_menu_principal
    fi
    echo "Actualizando el sistema..." | tee -a "$log_file"
    echo "apt update" >> "$log_file"
    sudo apt update && sudo apt upgrade -y >> "$log_file" 2>&1
    if [ $? -eq 0 ]; then
        echo -e "${green}Sistema actualizado correctamente.${end}"
    else
        echo -e "${red}Error al actualizar el sistema.${end}"
    fi

    # Instalar cada aplicación y verificar la instalación
    for app in "${requerimientos[@]}"; do
        echo
        echo -e "Instalando ${blue}$app...${end}" | tee -a "$log_file"
        echo "apt-get install -y $app" >> "$log_file" 2>&1
        sudo apt-get install -y $app >> "$log_file" 2>&1
        if [ $? -eq 0 ]; then
            echo -e "${green}$app instalado correctamente.${end}" | tee -a "$log_file"
        else
            echo -e "${red}Error al instalar $app. Presiona cualquier tecla para continuar...${end}" | tee -a "$log_file"
            read -n 1 -s -r
        fi
    done
    echo -e "${yellow}Instalación finalizada. Presiona cualquier tecla para continuar...${end}"
    read -n 1 -s -r
    mostrar_banner
    mostrar_menu_principal
    
}

# Función para actualizar el script desde GitHub y volver a ejecutarlo
function actualizar_y_ejecutar_script() {

        echo -e ${bblue}"--------------------------------------------------------------------------------------------"${end}
        echo -e ${bblue}"                         Configurar OdyssINT > Script                                       "${end}
        echo -e ${bblue}"--------------------------------------------------------------------------------------------"${end}
	echo -e "\n"

   # URL del archivo en GitHub
   github_url="https://raw.githubusercontent.com/javi-ag/OdyssINT/main/OdyssINT"

   # Nombre del archivo
   script_name="OdyssINT"

    wget -O "$script_name" "$github_url"
    chmod +x "$script_name"
    echo -e "${byellow}Script actualizado, se va a volver a ejecutar${end}"
    sleep 5
    ./"$script_name"

}

# Función para instalar herramientas OSINT
function instalar_herramientas_osint() {

        echo -e ${bblue}"--------------------------------------------------------------------------------------------"${end}
        echo -e ${bblue}"                         Configurar OdyssINT > Herramientas OSINT                           "${end}
        echo -e ${bblue}"--------------------------------------------------------------------------------------------"${end}
	echo -e "\n"

    # Comprobar si la carpeta $odyssinthome existe
    if [ ! -d "$odyssinthome" ]; then
        echo "Creando directorio $odyssinthome..."
        mkdir -p $odyssinthome
    fi

    # Archivo de registro específico
    log_file="$odyssinthome/$(date +'%Y-%m-%d-%H-%M')-instalacion_osint.log"

    # Lista de aplicaciones a instalar
    aplicacionesOSINT=("theHarvester" "recon-ng" "Spiderfoot" "Maltego")
    
    echo -e "Se va instalar las siguientes aplicaciones OSINT:"
    for app in "${aplicacionesOSINT[@]}"; do
    echo -e "- ${blue}$app${end}"
    done
    echo -e "${red}IMPORTANTE: Se tiene que haber ejecutado el primer paso para su correcta instalación.${end}"
    echo -e "${byellow}Presiona 'S/s' para confirmar y cualquier otra tecla para volver.${end}"
    read -n 1 -s tecla_confirmacion
    if [[ $tecla_confirmacion == "S" || $tecla_confirmacion == "s" ]]; then
    echo "Instalando:"
    echo 
    else
        mostrar_banner
        echo -e "${byellow}Volviendo al menú principal...${end}"
        mostrar_menu_principal
    fi

    #Funciones de instalación de herramientas OSINT
    instalar_theHarvester
    instalar_recon-ng
    instalar_spiderfoot
    instalar_maltego
    
    read -p "$(echo -e "${green}Instalación finalizada, pulsa cualquier tecla para continuar${end}") " confirmacion
    mostrar_banner
    mostrar_menu_principal
}

# Función para comprobar e instalar aplicaciones si no están instaladas
function comprobar_requerimientos() {

    echo -e "${byellow}Comprobando requerimientos...${end}"
    for app in "${requerimientos[@]}"; do
        if ! command -v "$app" &> /dev/null; then
            sudo apt-get install -y "$app"  # Asumiendo que se está usando apt como gestor de paquetes
        fi
    done
}

# Función para instalar theHarvester
function instalar_theHarvester() {
    # Descarga e instala TheHarvester desde GitHub
   if ! command -v $odyssinthome/theHarvester/theHarvester.py &> /dev/null; then
        echo "Descargando TheHarvester desde GitHub..."
        git clone https://github.com/laramies/theHarvester.git $odyssinthome/theHarvester 
        # Cambiar al directorio de TheHarvester
	cd $odyssinthome/theHarvester
	# Instalar TheHarvester
        echo "Instalando TheHarvester..."
        python3 -m pip install -r requirements/dev.txt
        python3 -m pip install -r requirements/base.txt
        python3 setup.py install
        echo -e "${green}TheHarvester instalado correctamente.${end}"
    else
    echo -e "${green}TheHarvester ya está instalado.${end}" 	    
    fi
}    

# Función para instalar Recon-ng
function instalar_recon-ng() {
	if ! command -v $odyssinthome/recon-ng/recon-ng &> /dev/null; then
        echo "Descargando TheHarvester desde GitHub..."
	git clone https://github.com/lanmaster53/recon-ng.git $odyssinthome/recon-ng
        # Cambiar al directorio de Recon-ng
	cd $odyssinthome/recon-ng
	# Instalar Recong-ng
        echo "Instalando Recong-ng..."
        python3 -m pip install -r REQUIREMENTS
        echo -e "${green}Recong-ng instalado correctamente.${end}"
    else
    echo -e "${green}Recong-ng ya está instalado.${end}" 	    
    fi
}

# Función para instalar spiderfoot
function instalar_spiderfoot() {
	if ! command -v $odyssinthome/spiderfoot/sfcli.py &> /dev/null; then
        echo "Descargando Spiderfoot desde GitHub..."
        git clone https://github.com/smicallef/spiderfoot.git $odyssinthome/spiderfoot
        # Cambiar al directorio de Spiderfoot
	cd $odyssinthome/spiderfoot
	# Instalar Spiderfoot
        echo "Instalando Spiderfoot..."
        pip3 install -r requirements.txt
        echo -e "${green}Spiderfoot instalado correctamente.${end}"
    else
    echo -e "${green}Spiderfoot ya está instalado.${end}" 	    
    fi
}

# Función para instalar Maltego
function instalar_maltego() {
	if ! command -v maltego &> /dev/null; then
        # Descarga e instala Maltego
        echo "Descargando Maltego..."
        wget --directory-prefix=$odyssinthome/maltego https://downloads.maltego.com/maltego-v4/linux/Maltego.v4.6.0.deb
        #sudo apt install openjdk-17-jdk
        # Cambiar al directorio de Spiderfoot
	cd $odyssinthome/maltego
	# Instalar Spiderfoot
        echo "Instalando Maltego..."
        sudo dpkg -i Maltego.v4.6.0.deb
        sudo apt install -f
        echo -e "${green}Maltego instalado correctamente.${end}"
    else
    echo -e "${green}Maltego ya está instalado.${end}" 	    
    fi
}

# Función para instalar extensiones en Firefox
function instalar_extensiones_firefox() {

        echo -e ${bblue}"--------------------------------------------------------------------------------------------"${end}
        echo -e ${bblue}"                         Configurar OdyssINT > Extensiones                                  "${end}
        echo -e ${bblue}"--------------------------------------------------------------------------------------------"${end}
	echo -e "\n"

    # Verificar si Firefox está instalado
    if ! command -v firefox &> /dev/null; then
        echo -e "${red}Firefox no está instalado. Por favor, ejecuta el primer paso del menú para instalarlo.${end}"
        return
    fi

    # URL de donde se recogerán las extensiones
    url="https://addons.mozilla.org/es/firefox/collections/18254528/OdyssINT/"
     
    # Obtener los números de ID de la URL y el nombre de cada extensión
    ids=($(curl -s "$url" | grep -o 'ID="[0-9]*"' | sed 's/ID=//' | tr -d '"'))
    names=($(curl -s "$url" | grep -o 'NAME="[^"]*"' | sed 's/NAME="//' | sed 's/"$//' | sed 's/ /_/g')) # Reemplaza espacios por guiones bajos
    
    # Mostrar los nombres de las extensiones y solicitar confirmación
    echo -e "${byellow}Se van a instalar las siguientes extensiones:${end}"
    for name in "${names[@]}"; do
        echo -e "${blue}- ${name//_/ }${end}"  # Reemplaza guiones bajos por espacios
    done
    echo -e "${red}IMPORTANTE: A continuación se abrirá una pestaña de Firefox por cada extensión."
    echo -e "${red}            Acepta la instalación en cada pestaña incluyendo su uso en ventanas privadas.${end}"
    read -p "$(echo -e "${byellow}¿Desea continuar con la instalación? (S/n):${end}") " confirmacion
    if [[ $confirmacion != "S" && $confirmacion != "s" ]]; then
        mostrar_banner
        echo -e "${byellow}Volviendo al menú...${end}"
        listar_configurar_odyssint
        return
    fi
    
    # Deshabilitar las advertencias de GTK
    export GTK_MODULES=

    # Crear o vaciar el directorio para almacenar las extensiones descargadas
    extensions_dir="$odyssinthome/extensions"
    mkdir -p "$extensions_dir"
    rm -rf "$extensions_dir"/*  # Borrar contenido si existe
    
    # Descargar e instalar las extensiones para cada ID
    for i in "${!ids[@]}"; do
        id="${ids[$i]}"
        name="${names[$i]}"
        
        # Descargar el archivo .xpi
        download_url="https://addons.mozilla.org/firefox/downloads/file/$id/addon-$id-latest.xpi"
        curl -s -o "$extensions_dir/$name-addon-$id-latest.xpi" "$download_url"
    done
    
    # Instalar todas las extensiones desde el directorio de extensiones
    echo -e "${green}Instalando todas las extensiones...${end}"	    
    firefox "$extensions_dir"/*.xpi
    
    # Preguntar si desea eliminar los archivos descargados
    read -p "$(echo -e "${byellow}¿Desea eliminar los archivos descargados? (S/n):${end}") " borrar_confirmacion
    if [[ $borrar_confirmacion == "S" || $borrar_confirmacion == "s" ]]; then
        rm -rf "$extensions_dir"
    fi
    mostrar_banner    
    echo -e "${green}Instalación de extensiones completada.${end}"
    listar_configurar_odyssint
}


# Función para instalar marcadores
function instalar_marcadores_firefox()  {

    echo -e ${bblue}"--------------------------------------------------------------------------------------------"${end}
    echo -e ${bblue}"                         Configurar OdyssINT > Marcadores                                   "${end}
    echo -e ${bblue}"--------------------------------------------------------------------------------------------"${end}
    echo -e "\n"


    # Verificar si Firefox está instalado
    if ! command -v firefox &> /dev/null; then
        echo -e "${red}Firefox no está instalado. Por favor, ejecuta el primer paso del menú para instalarlo.${end}"
        return
    fi
    
    # Solicita que tienes que tener instaladas las extensiones previamente
    echo "Para sincronizar los marcadores vamos a configurar la extensión 'BookmarkHub - sync bookmarks' en Firefox."
    echo -e "${red}IMPORTANTE: Los marcadores existentes se borrarán para incluir los nuevos.${end}"    	
    read -p "$(echo -e "${byellow}¿Has ejecutado el paso de instalación de extensiones? (S/n):${end}") " confirmacion
    if [[ $confirmacion != "S" && $confirmacion != "s" ]]; then
        mostrar_banner
        echo -e "${red}Instala la extensión 'BookmarkHub ' de Firefox en el paso anterior para sincronizar los marcadores.${end}"    	
	listar_configurar_odyssint
    fi    
    echo -e 
    echo -e "${cyan}Sigue los siguientes pasos para sincronizar los marcadores a través de esta extensión:"    
    echo -e "1. Se abrirá la ventana de addons de firefox, abre la extensión 'BookmarkHub - sync bookmarks'."
    echo -e "2. Ve a la pestaña 'Preferences'."
    echo -e "3. En el campo 'Github Token', pega el valor '${end}${red}ghp_Veqj8j Zi2X4paEfLj ejtJgrdKNumyE32hu73${end}${cyan}' (Eliminando los espacios)."
    echo -e "4. En el campo 'Gist ID', pega el valor ${end}'${red}38a4f99ab9c2f2ab255bf122aa36f97f${cyan}'."
    echo -e "5. Selecciona ahora el icono de la extensión en la parte superior derecha del navegador,"
    echo -e "   el icono es un símbolo de un marcador de páginas blanco con un fondo gris."
    echo -e "6. Ejecuta ${end}${red}\"Download Bookmarks\"${end}${cyan} y espera a que la extensión"
    echo -e "   te confirme que ha podido sincronizar todos los marcadores a través de un pop-up."
    echo -e "7. Cierra el navegador.${end}"
    
    # Deshabilitar las advertencias de GTK
    export GTK_MODULES=
    
    # Esperar 5 segundos
    sleep 5
    firefox -new-tab "about:addons"

    read -p "$(echo -e "${byellow}¿Has configurado y sincronizado los marcadores? (S/n):${end}") " confirmacion
    if [[ $confirmacion != "S" && $confirmacion != "s" ]]; then
        mostrar_banner
        echo -e "${byellow}Vuelve a intentarlo...${end}"
        instalar_marcadores_firefox  
    fi   
    mostrar_banner
    echo -e "${green}Instalación de marcadores completada.${end}"    
    listar_configurar_odyssint    

}

# Función eliminar herramientas instaladas y limpiar directorio de OdyssINT
function desinstalar_odyssint()  {

    echo -e ${bred}"--------------------------------------------------------------------------------------------"${end}
    echo -e ${bred}"                         Configurar OdyssINT > Desinstalar OdyssINT                         "${end}
    echo -e ${bred}"--------------------------------------------------------------------------------------------"${end}
    echo -e "\n"

    echo -e ${bred}"Se van a desinstalar las siguientes aplicaciones:"
    for app in "${requerimientos[@]}"; do
    echo -e "- $app"
    done
    echo -e "${bred}Además, se eliminará la carpeta $odyssinthome."${end}
    echo -e "${byellow}Presiona 'S/s' para confirmar y cualquier otra tecla para volver.${end}"
    read -n 1 -s tecla_confirmacion
    if [[ $tecla_confirmacion == "S" || $tecla_confirmacion == "s" ]]; then
    rm -rf $odyssinthome
    sudo apt-get purge $requerimientos
    mostrar_banner
    echo -e "${byellow}Aplicaciones desinstaladas y carpeta de Odyssint eliminada...${end}"
    mostrar_menu_principal
    else
        mostrar_banner
        echo -e "${byellow}Volviendo al menú principal...${end}"
        mostrar_menu_principal
    fi

}

#Inicio Script
trap ctrl_c INT
mostrar_banner
mostrar_menu_principal
